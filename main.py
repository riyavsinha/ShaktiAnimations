from manim import *
import os
from flower import FlowerBuddy
from custom_objects import *
from flower_animations import *

class IntroScene(Scene):
    def construct(self):
        flower = FlowerBuddy()
        flower.mouth.smile()
        self.play(FadeIn(flower))
        flower.start_waving()
        self.wait(1)
        self.play(Transform(flower.eyes, flower.eyes.generate_target().eye_smile()), run_time=.75)
        self.wait(1)
        self.play(Transform(flower.eyes, flower.eyes.target.reset()), run_time=.75)
        flower.stop_waving()
        self.wait(1)
        eth = SVGMobject(os.path.join(os.getcwd(), 'assets', 'eth_logo.svg')).shift(UP*1.75+LEFT*4)
        self.play(flower.animate.shift(DOWN))
        self.play(FadeIn(eth), flower.eyes.animate.look_at(eth))
        self.wait(1)
        btc = SVGMobject(os.path.join(os.getcwd(), 'assets', 'btc_logo.svg')).shift(UP*1.75+RIGHT*4)
        self.play(FadeIn(btc), flower.eyes.animate.look_at(btc))
        self.wait(1)
        ada = SVGMobject(os.path.join(os.getcwd(), 'assets', 'ada_logo.svg')).shift(UP*3).set_color('#1e5cb1')
        self.play(FadeIn(ada), flower.eyes.animate.look_at(ada))
        self.wait(1)
        self.play(FadeOut(ada), FadeOut(btc), FadeOut(eth))
        lock = lock_object().shift(UP*1.75 + LEFT*4)
        lock_text = Tex(r"Secure").next_to(lock, DOWN, buff=.5)
        web = decentralized_web().shift(UP*1.75 + RIGHT*4)
        web_text = Tex(r"Decentralized").next_to(web, DOWN, buff=.5)
        self.play(ShowCreation(lock), Write(lock_text), flower.eyes.animate.look_at(lock))
        self.play(ShowCreation(web), Write(web_text), flower.eyes.animate.look_at(web))
        self.play(Blink(flower))
        self.wait(2)
        self.play(FadeOut(lock), FadeOut(lock_text), FadeOut(web_text), FadeOut(web))
        iohk = ImageMobject(os.path.join(os.getcwd(), 'assets', 'iohk_logo.png')).shift(UP*3)
        self.play(FadeIn(iohk), flower.eyes.animate.look_at(iohk))
        self.wait(4)
        self.play(flower.mouth.animate.o_mouth())
        self.play(FadeOut(iohk))
        paper_2 = ImageMobject(os.path.join(os.getcwd(), 'assets', 'iohk_paper_2.png')).shift(DOWN/2)
        self.play(flower.animate.to_corner(DL))
        self.play(FadeIn(paper_2), Transform(flower.eyes, flower.eyes.generate_target().look_at(paper_2)))
        video_2 = Tex(r"Part 2: game theory, treasury system election proofs").next_to(paper_2, UP, buff=.5)
        video_1 = Tex(r"Part 1: overview, motivations and design decisions").next_to(video_2, UP, buff=.5)
        self.play(Write(video_1), Transform(flower.eyes, flower.eyes.target.look_at(video_1)))
        self.play(Write(video_2))


class EthIntroScene(Scene):
    def construct(self):
        # Show Basic Block: Tx List
        block_1 = Rectangle(height=3, width=3)
        tx_list = Tex(r"Tx 1\\Tx 2\\ Tx {\textit n}")
        tx_list.next_to(block_1.get_top(), DOWN, buff=0.5)
        self.play(ShowCreation(block_1))
        self.play(Write(tx_list))

        # Show Tx Reward above original list and add miner
        tx_reward = Tex(r"Tx Reward")
        tx_reward.set_color(RED)
        self.play(tx_list.animate.shift(.6 * DOWN))
        tx_reward.next_to(tx_list, UP)
        self.play(Write(tx_reward))
        miner = Rectangle(height=1, width=3)
        miner.next_to(block_1, DOWN)
        miner_text = Tex(r"Miner")
        miner_text.move_to(miner);
        reward_arrow = CurvedArrow(tx_reward.get_right() + .25 * RIGHT, miner.get_right(), angle=-TAU / 4)
        self.play(ShowCreation(miner))
        self.play(Write(miner_text))
        self.play(ShowCreation(reward_arrow))

        # Add Header
        block_1_header = Rectangle(height=1, width=3)
        block_1_header.next_to(block_1, UP, buff=0)
        self.play(ShowCreation(block_1_header))
        block_1_header_text = Tex(r"Prev Hash")
        block_1_header_text.move_to(block_1_header)
        self.play(Write(block_1_header_text))

        # Create new blocks
        block_group = VGroup(block_1, tx_list, tx_reward, block_1_header, block_1_header_text, miner, miner_text,
                             reward_arrow)
        self.play(block_group.animate.shift(LEFT * 4.5))
        block_group_2 = block_group.copy()
        block_group_2.shift(RIGHT * 4.5)
        arrow_1_2 = Arrow(block_group_2[3].get_left(), block_group[3].get_right(), buff=0)
        block_group_3 = block_group_2.copy()
        block_group_3.shift(RIGHT * 4.5)
        arrow_2_3 = Arrow(block_group_3[3].get_left(), block_group_2[3].get_right(), buff=0)
        self.play(TransformFromCopy(block_group, block_group_2))
        self.play(ShowCreation(arrow_1_2))
        self.play(TransformFromCopy(block_group_2, block_group_3))
        self.play(ShowCreation(arrow_2_3))

        # Add the treasury
        blockchain_with_miners = VGroup(block_group, block_group_2, block_group_3, arrow_1_2, arrow_2_3)
        transformed = blockchain_with_miners.generate_target()
        transformed.scale(.75)
        transformed.shift(UP*1.75)
        self.play(ReplacementTransform(blockchain_with_miners, transformed))
        treasury = Rectangle(height=1, width=3)
        treasury.shift(DOWN*1.5+LEFT)
        treasury_text = Tex(r"Treasury")
        treasury_text.move_to(treasury)
        # Arrows from block rewards to treasury
        treasury_arrows = VGroup()
        for block_group in blockchain_with_miners[0:3]:
            treasury_arrow = Arrow(block_group[2].get_right() + .25 * RIGHT, treasury.get_top(), buff=0)
            treasury_arrow.set_color(YELLOW)
            treasury_arrow.set_stroke(width=2, opacity=.75)
            treasury_arrow.get_tip().scale(.75)
            block_group.add(treasury_arrow)
            treasury_arrows.add(treasury_arrow)
        # Proposals
        proposal_1 = Rectangle(height=1.25, width=4.5)
        proposal_1.next_to(treasury, RIGHT, buff=1.5)
        proposal_1_text = Tex(r"Proposal:\\developer salaries")
        proposal_1_text.move_to(proposal_1)
        arrow_proposal_1 = Arrow(treasury.get_right(), proposal_1.get_left(), buff=0)
        # self.play(ShowCreation(arrow_proposal_1))
        self.play(ShowCreation(proposal_1))
        self.play(Write(proposal_1_text))
        proposal_2 = Rectangle(height=1.25, width=4.5)
        proposal_2.next_to(proposal_1, DOWN)
        proposal_2_text = Tex(r"Proposal:\\marketing")
        proposal_2_text.move_to(proposal_2)
        arrow_proposal_2 = Arrow(treasury.get_right(), proposal_2.get_left(), buff=0)
        # self.play(ShowCreation(arrow_proposal_2))
        self.play(ShowCreation(proposal_2))
        self.play(Write(proposal_2_text))
        # Central Authority
        govt = Rectangle(height=1, width=3)
        govt.next_to(treasury, LEFT)
        govt_text = Tex(r"Government")
        govt_text.move_to(govt)
        govt_arrow_1 = Arrow(govt.get_right(), proposal_1.get_left(), buff=0)
        govt_arrow_2 = Arrow(govt.get_right(), proposal_2.get_left(), buff=0)
        self.play(ShowCreation(govt), Write(govt_text), ShowCreation(govt_arrow_1), ShowCreation(govt_arrow_2))
        self.wait(3)
        govt_group = VGroup(govt, govt_text, govt_arrow_1, govt_arrow_2)
        self.play(FadeOut(govt_group))
        self.wait(3)
        # Community Funding
        comm = Rectangle(height=2, width=3)
        comm.next_to(treasury, LEFT)
        comm_text = Tex(r"Community Funding")
        comm_text.scale(.75)
        comm_text.next_to(comm.get_bottom(), DOWN, buff=.1)
        comm_people = VGroup(Circle(radius=.3), Circle(radius=.3), Circle(radius=.3))
        comm_people.move_to(comm).arrange()
        comm_arrow_1 = Arrow(comm.get_right(), proposal_1.get_left(), buff=0)
        comm_arrow_2 = Arrow(comm.get_right(), proposal_2.get_left(), buff=0)
        self.play(ShowCreation(comm_people))
        self.play(ShowCreation(comm), Write(comm_text), ShowCreation(comm_arrow_1), ShowCreation(comm_arrow_2))
        self.wait(3)
        comm_group = VGroup(comm, comm_text, comm_arrow_1, comm_arrow_2, comm_people)
        self.play(comm_group.shift(UP))
        self.play(FadeOut(comm_group))
        self.wait(3)


        self.play(ShowCreation(treasury))
        self.play(Write(treasury_text))
        self.play(ShowCreation(treasury_arrows))
